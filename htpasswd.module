<?php

global $htpasswd_maildomain;
global $htpasswd_file;
global $htpasswd_groupfile;
global $htpasswd_roles;
include_once "htpasswd.conf";

/**
 * Configure this module
 */
function htpasswd_admin() {
  $form = array();

  return system_settings_form($form);
}

/**
 * Adds a menu entry for the configuration
 */
function htpasswd_menu() {
  $items = array();

  $items['admin/config/htpasswd'] = array(
    'title' => 'HTPasswd',
    'description' => 'Configures the HTPasswd module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('htpasswd_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Main user validation function.
 *
 * If successful, sets the global $user object
 */
function htpasswd_login_authenticate_validate($form, &$form_state) {
  global $user;

  htpasswd_authenticate($form_state['values']);

  if($user) {
    $form_state['uid'] = $user->uid;
  }
}

/**
 * Main user authentication function.
 *
 * If successful, sets the global $user object.
 */
function htpasswd_authenticate($form_values = array()) {
  global $user;

  $name = $form_values['name'];
  $pass = trim($form_values['pass']);

  // The user_login_name_validate() is not called if the user is being
  // authenticated from the httpauth or services modules, therefore call it
  // here.
  $form_state['values'] = $form_values;
  user_login_name_validate(NULL, $form_state);

  // (Design decision) uid=1 (admin user) must always authenticate to local
  // database this user is critical for all drupal admin and upgrade operations
  // so it is best left with drupal's native authentication.
  $result = db_query("SELECT uid FROM {users} WHERE name = ':name' AND uid = 1", array(':name' => $name));
  if ($record=$result->fetchObject()) {
    user_authenticate($name, $pass);
    return;
  }

  if (!($dn = _htpasswd_auth($name, $pass)))
    return;

  user_external_login_register($name, "htpasswd");

  _htpasswd_update_roles();

  $edit=array();
  user_login_finalize($edit);
  
  return $user;
}

/**
 * Check user roles and apply groups from htgroup file
 */
function _htpasswd_update_roles() {
  global $user;
  global $htpasswd_groupfile;
  global $htpasswd_roles;

  if(!file_exists($htpasswd_groupfile))
    return;

  // Check for user in all htgroups
  $htgroup=array();
  $f=fopen($htpasswd_groupfile, "r");
  while($r=trim(fgets($f))) {
    if(preg_match("/^(\w+):(.*)$/", $r, $m)) {
      $m2=explode(" ", $m[2]);
      if(in_array($user->name, $m2)) {
        $htgroup[]=$m[1];
      }
    }
  }
  fclose($f);

  // Check for user in all drupal roles
  $drupalrole=array();
  $result=db_query("SELECT * FROM {users_roles} ur RIGHT JOIN {role} r ON ur.rid=r.rid AND ur.uid=:uid", array('uid'=>$user->uid));
  foreach($result as $record) {
    $all_drupal_roles[$record->rid]=$record->name;

    if($record->uid) {
      $drupalrole[]=$record->name;
    }
  }

  foreach($htpasswd_roles as $group=>$role) {
    $rid=array_search($role, $all_drupal_roles);

    // Check whether we got a role
    if((in_array($group, $htgroup))&&(!in_array($role, $drupalrole))) {
      $record=array('uid'=>$user->uid, 'rid'=>$rid);
      drupal_write_record('users_roles', $record);
    }

    // Check whether we lost a role
    if((!in_array($group, $htgroup))&&(in_array($role, $drupalrole))) {
      db_query("DELETE FROM {users_roles} WHERE uid = :uid AND rid = :rid", array('uid'=>$user->uid, 'rid'=>$rid));
    }
  }
}

/**
 * Check if user/pass-combination matches
 *
 * @param $name
 *   A login name.
 * @param $pass
 *   A given password
 *
 * @return
 *   A boolean: true for correct, false for wrong
 */
function _htpasswd_auth($name, $pass) {
  global $htpasswd_file;

  $f = fopen($htpasswd_file, "r");
  while ($r = trim(fgets($f))) {
    $r = explode(":", $r);
    if (($r[0] == $name) && (crypt($pass, $r[1]) == $r[1])) {
      fclose($f);
      return true;
    }
  }
  fclose($f);

  return false;
}

/**
 * Queries htpasswd file for the user.
 *
 * @param $name
 *   A login name.
 *
 * @return
 *   An array with user's data or NULL if not found.
 */
function _htpasswd_user_lookup($name) {
  global $htpasswd_maildomain;

  // Generate a random drupal password. htpasswd will be used anyways.
  $pass_new = user_password(20);
    
  return array(
    'name' => $name,
    'pass' => $pass_new,
    'mail' => "$name@$htpasswd_maildomain",
    'init' => $name,
    'status' => 1,
  );
}

/**
 * Implements hook_form_alter().
 */
function htpasswd_form_alter(&$form, $form_state, $form_id) {
  if (isset($form['#validate']) && is_array($form['#validate']) && ($key = array_search('user_login_authenticate_validate', $form['#validate'])))
    $form['#validate'][$key] = 'htpasswd_login_authenticate_validate';
}
